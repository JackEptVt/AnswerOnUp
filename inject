// dllinject.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"

#include <stdio.h>  
#include <stdlib.h>  
#include <windows.h>  
#include <tlhelp32.h>  

DWORD dwProcessID = 0;
HANDLE hProcessHandle = NULL;
LPVOID pAddrStart = NULL;
HANDLE hThreadHandle = NULL;
HANDLE hDllHandle = NULL;


/*****************************
*函数名：GetProcessIdByName
*功  能：根据进程名查找进程ID
*入  参：const char*ProcessName，进程名
*出  参：无
*返回值：进程ID，失败返回-1
*****************************/
DWORD GetProcessIdByName(const char*ProcessName)
{
	PROCESSENTRY32 stProcess;
	HWND hProcessShot;
	stProcess.dwSize = sizeof(PROCESSENTRY32);
	hProcessShot = (HWND)CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	Process32First(hProcessShot, &stProcess);

	do
	{
		if (!strcmp(ProcessName, stProcess.szExeFile))
			return stProcess.th32ProcessID;
	} while (Process32Next(hProcessShot, &stProcess));

	CloseHandle(hProcessShot);
	return -1;
}

BOOL EnableDebugPrivilege()
{

	BOOL fOK = FALSE;
	HANDLE hToken;
	if (OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &hToken)) //打开进程访问令牌  
	{
		//试图修改“调试”特权  
		TOKEN_PRIVILEGES tp;
		tp.PrivilegeCount = 1;
		LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &tp.Privileges[0].Luid);
		tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
		AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(tp), NULL, NULL);
		fOK = (GetLastError() == ERROR_SUCCESS);
		CloseHandle(hToken);
	}
	return fOK;
}

/*****************************
*函数名：dll_inject
*功  能：将dll注入到指定的进程中
*入  参：const char*ProcessName，进程名
const char *pDllName，dll名
*出  参：无
*返回值：成功返回0，失败返回-1
*****************************/
int dll_inject(const char *pProcessName, const char *pDllName)
{
	EnableDebugPrivilege();
	//char *pProcessName="QQ.exe";  
	BOOL bSuccess = FALSE;
	//根据进程名获取进程ID  
	dwProcessID = GetProcessIdByName(pProcessName);
	if (dwProcessID == -1)
	{
		printf("%s未运行", pProcessName);
		return -1;
	}
	printf("%s进程ID为%d", pProcessName, dwProcessID);

	//根据进程ID获取进程句柄  
	hProcessHandle = OpenProcess(PROCESS_ALL_ACCESS | PROCESS_CREATE_THREAD | PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, dwProcessID);
	if (hProcessHandle == NULL)
	{
		printf("OpenProcess获取进程句柄失败\n");
		return -1;
	}

	//用VirtualAllocEx在进程内申请内存  
	pAddrStart = VirtualAllocEx(hProcessHandle, 0, 1024, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (pAddrStart == NULL)
	{
		printf("进程内存申请失败!\n");
		return -1;
	}
	printf("申请进程内存的首地址为0x%x\n", pAddrStart);

	//将需要运行的dll名写入申请的内存地址  
	bSuccess = WriteProcessMemory(hProcessHandle, pAddrStart, pDllName, 1024, 0);
	if (!bSuccess)
	{
		printf("WriteProcessMemory失败！\n");
		return -1;
	}
	//printf("memory of pAddrStart is:%s",pAddrStart);  

	//注入,即"LoadLibraryA"函数加载mydll.dll  

	HMODULE hMod = GetModuleHandle("kernel32.dll");
	LPTHREAD_START_ROUTINE  pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, "LoadLibraryA");


	hThreadHandle = CreateRemoteThread(hProcessHandle,
		0,
		0,
		pThreadProc,//函数LoadLibraryA的地址  
		pAddrStart,//mydll.dll  
		0,
		0);
	if (hThreadHandle == NULL)
	{
		printf("在进程%s中注入%s失败", pProcessName, pDllName);
		printf("MyCreateRemoteThread() : CreateRemoteThread() 调用失败！错误代码: [%d]/n", GetLastError());
		return -1;
	}
	WaitForSingleObject(hThreadHandle, INFINITE);
	//到这里已经完成dll的加载即注入了，通过dll函数执行我们要完成的任务  


	//释放  
	VirtualFreeEx(hProcessHandle, pAddrStart, 0, MEM_RELEASE);
	CloseHandle(hThreadHandle);
	CloseHandle(hProcessHandle);

	return 0;
}

/*****************************
*函数名：dll_free
*功  能：卸载注入到进程中的dll
*入  参：const char*ProcessName，进程名
const char *pDllName，dll名
*出  参：无
*返回值：成功返回0，失败返回-1
*****************************/
int dll_free(const char *pProcessName, const char *pDllName)
{
	BOOL bSuccess = FALSE;
	//根据进程名获取进程ID  
	dwProcessID = GetProcessIdByName(pProcessName);
	if (dwProcessID == -1)
	{
		printf("%s未运行", pProcessName);
		return -1;
	}
	printf("%s进程ID为%d", pProcessName, dwProcessID);

	//根据进程ID获取进程句柄  
	hProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);
	if (hProcessHandle == NULL)
	{
		printf("OpenProcess获取进程句柄失败\n");
		return -1;
	}

	//用VirtualAllocEx在进程内申请内存  
	pAddrStart = VirtualAllocEx(hProcessHandle, 0, 1024, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (pAddrStart == NULL)
	{
		printf("进程内存申请失败!\n");
		return -1;
	}
	printf("申请进程内存的首地址为0x%x\n", pAddrStart);

	//将需要运行的dll名写入申请的内存地址  
	bSuccess = WriteProcessMemory(hProcessHandle, pAddrStart, pDllName, 1024, 0);
	if (!bSuccess)
	{
		printf("WriteProcessMemory失败！\n");
		return -1;
	}

	//注入,即GetModuleHandleA函数获取mydll.dll的实例，目的是为了后面的通过GetExitCodeThread获得mydll.dll的句柄，最后执行FreeLibrary  
	hThreadHandle = CreateRemoteThread(hProcessHandle,
		0,
		0,
		(LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle("kernel32.dll"), "GetModuleHandleA"),//函数GetModuleHandleA的地址  
		pAddrStart,//mydll.dll  
		0,
		0);
	//用GetExitCodeThread取出dll句柄  
	WaitForSingleObject(hThreadHandle, INFINITE);
	GetExitCodeThread(hThreadHandle,(LPDWORD) &hDllHandle);

	//把FreeLibrary注入到进程，释放注入的DLL  
	hThreadHandle = CreateRemoteThread(hProcessHandle,
		0,
		0,
		(LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle("kernel32.dll"), "FreeLibrary"),
		hDllHandle,
		0,
		0);

	//释放  
	WaitForSingleObject(hThreadHandle, INFINITE);
	VirtualFreeEx(hProcessHandle, pAddrStart, 0, MEM_RELEASE);
	CloseHandle(hThreadHandle);
	CloseHandle(hProcessHandle);

	return 0;
}

int main()
{
	//将mydll.dll注入到QQ中  
	

	dll_inject("WINWORD.EXE", "c:\\lwc.dll");
	system("pause");
	return 0;
}

